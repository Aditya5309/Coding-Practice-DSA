A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.
 

Constraints:

1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

C++ Code with 2 pointers:

#include<iostream>
#include<string>
#include<cctype>
using namespace std;

class Solution {
public:
    bool isPalindrome(string s) {
        string cleaned = "";

        for (char ch : s){
            if(isalnum(ch)){
                cleaned += tolower(ch);
            }
        }

        int start = 0;
        int end = cleaned.length() - 1;

        while(start < end) {
            if(cleaned[start] != cleaned[end]){
                return false;
            }

            start ++;
            end --;
        }

        return true;
    }
};

Python Solution:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        cleaned = ""

        for char in s:
            if char.isalnum():
                cleaned +=char.lower()

        return cleaned == cleaned[::-1]