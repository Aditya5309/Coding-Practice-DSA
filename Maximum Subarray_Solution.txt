Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

C++ code with Kadane's Algorithm:

#include<iostream>
#include<vector>
#include<climits>
using namespace std;

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxSum = INT_MIN;
        int currSum = 0;
        for (int st = 0;st<nums.size();st++){
            currSum = max(nums[st],currSum+nums[st]);
            maxSum = max(currSum,maxSum);
        }

        return maxSum;
    }
};

C++ code with Kadane's Algorithm to print the maximum subarray:

#include <iostream>
#include <vector>
#include <climits>
using namespace std;

void maxSubArrayWithPrint(const vector<int>& nums) {
    int maxSum = INT_MIN;
    int currentSum = 0;

    int start = 0;        // potential start of current subarray
    int maxStart = 0;     // final start of max subarray
    int maxEnd = 0;       // final end of max subarray

    for (int i = 0; i < nums.size(); i++) {
        if (currentSum <= 0) {
            // Start new subarray at current index
            currentSum = nums[i];
            start = i;
        } else {
            // Extend the current subarray
            currentSum += nums[i];
        }

        // Update the best (max) sum and its indices
        if (currentSum > maxSum) {
            maxSum = currentSum;
            maxStart = start;
            maxEnd = i;
        }
    }

    // Output the results
    cout << "Maximum Subarray Sum = " << maxSum << endl;
    cout << "Subarray: ";
    for (int i = maxStart; i <= maxEnd; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;
}

int main() {
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    maxSubArrayWithPrint(nums);
    return 0;
}

Python Solution for Maximum Subarray:

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        currSum = maxSum = nums[0]

        for i in range(1,len(nums)):
            currSum = max(nums[i],currSum+nums[i])
            maxSum = max(currSum,maxSum)
        
        return maxSum
