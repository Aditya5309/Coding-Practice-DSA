Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]

Output: true

Explanation:

The element 1 occurs at the indices 0 and 3.

Example 2:

Input: nums = [1,2,3,4]

Output: false

Explanation:

All elements are distinct.

Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]

Output: true

 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

C++ Solution with Unordered Map

#include<iostream>
#include<unordered_map>

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int,int> countMap;

        for (int i = 0; i<nums.size();i++){
            countMap[nums[i]]++;
            if(countMap[nums[i]] > 1){
                return true;
            }
        }

        return false;
    }
};

C++ Solution with Unordered Set

#include<iostream>
#include<unordered_set>

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int> countSet;

        for(int i : nums) {
            if(countSet.count(i)){
                return true;
            }

            countSet.insert(i);
        }

        return false;
    }
};

Python Solution with Set

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        countSet = set()

        for num in nums:
            if(num in countSet):
                return True
            else:
                countSet.add(num)
        
        return False
