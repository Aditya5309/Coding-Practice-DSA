Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

C++ Code:

#include<iostream>
#include<string>
#include<stack>

class Solution {
public:
    bool isValid(string s) {
        stack<char> stk;

        for(char ch: s){
            if(ch == '(' || ch == '[' || ch == '{') {
                stk.push(ch);
            } 
            else {
                if(stk.empty()) return false;

                char top = stk.top();
                if((ch == ')'  && top == '(') || (ch == ']' && top == '[') || (ch == '}' && top == '{')) {
                    stk.pop();
                }
                else{
                    return false;
                }
            }
        }

        return stk.empty();
    }
};

Python Code:

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []

        bracket_map = {')' : '(',']' : '[','}':'{'}

        for ch in s:
            if ch in bracket_map:
                top = stack.pop() if stack else '#'
                if(bracket_map[ch] != top):
                    return False
            else:
                stack.append(ch)

        return not stack