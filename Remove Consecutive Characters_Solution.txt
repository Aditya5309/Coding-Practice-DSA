You are given a string s, consisting of lowercase alphabets. Your task is to remove consecutive duplicate characters from the string. 

Example:

Input: s = "aabb"
Output:  "ab" 
Explanation: 
The character 'a' at index 2 is the same as 'a' at index 1, so it is removed.
Similarly, the character 'b' at index 4 is the same as 'b' at index 3, so it is removed.
The final string is "ab".
Input:s = "aabaa"
Output: "aba"
Explanation: 
The character 'a' at index 2 is the same as 'a' at index 1, so it is removed.
The character 'a' at index 5 is the same as 'a' at index 4, so it is removed.
The final string is "aba".
Input: s = "abcddcba"
Output: "abcdcba"
Explanation: 
The character 'd' at index 5 is the same as 'd' at index 4, so it is removed.
No other consecutive duplicates exist.
The final string is "abcdcba".
Constraints:
1 ≤ n ≤ 106
All characters in the string are lowercase English alphabets.

C++ Code:

#include<iostream>
#include<string>

class Solution {
  public:
    string removeConsecutiveCharacter(string& s) {
        // code here.
        string result = "";
        result+= s[0];
        
        for (int i = 1;i<s.length();i++){
            if(s[i] != s[i-1]){
                result += s[i];
            }
        }
        
        return result;
    }
};

Python Code:

#User function Template for python3

class Solution:
    def removeConsecutiveCharacter(self, s):
        # code here
        result = ""
        
        result+=s[0]
        
        for i in range(1,len(s)):
            if(s[i] != s[i-1]):
                result+=s[i]
                
        return result